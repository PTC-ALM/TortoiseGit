/*
 * Copyright (c) 2001 - 2004 MKS Software Inc.; in Canada copyright
 * owned by MKS Inc. All rights reserved.
 *
 * Any use, disclosure, reproduction or modification of this
 * Software other than as expressly authorized in writing by MKS
 * is strictly prohibited.
 */

#ifndef MKS_COMMAND_H
#define MKS_COMMAND_H

#include "mksResponse.h"
#include "mksError.h"

/** 
 * \file mksCommand.h
 * \brief The header file defining the main functions used for accessing
 * the MKS Integrity Server and MKS Integrity Client via the Integrity API.
 *
 * This header file contains various enums and functions used for logging
 * messages to the standard MKS Integrity API log file.
 */

/** Constant for the 'aa' Integrity application. */ 
#define AA "aa" 

/** Constant for the 'im' Integrity application. */ 
#define IM "im" 

/** Constant for the 'tm' Integrity application. */ 
#define TM "tm" 

/** Constant for the 'rq' Integrity application. */ 
#define RQ "rq" 

/** Constant for the 'integrity' application. */ 
#define INTEGRITY "integrity" 

/** Constant for the 'si' Integrity application. */ 
#define SI "si" 

/** Constant for the 'sd' Integrity application. */ 
#define SD "sd" 

/**
 * enum used to determine which type of response you would like to
 * retrieve.  INTERIM_NO_CACHE and INTERIM_CACHE are used to retrieve
 * interim responses, which do not retrieve the entire response from the
 * mksIntegrationPoint at once, but rather reads in the response in
 * sections.  INTERIM_NO_CACHE is a destructive type of execute in that it
 * offers no random access, only serial access.  Refer to the user
 * documentation for a full description.
 */
typedef enum mksExecuteTypeEnum {
    NO_INTERIM = 0, /**< Type used to retrieve a non-interim mksResponse. */
    INTERIM_NO_CACHE = 1, /**< Type used to retrieve a interim mksResponse 
    			       that does not cache mksSubRoutine or 
			       mksWorkItem instances. */
    INTERIM_CACHE = 2 /**< Type used to retrieve a interim mksResponse 
    			   that caches mksSubRoutine and mksWorkItem 
			   instances. */
} mksExecuteType;

/**
 * typedef used for abstraction.
 */
typedef struct _mksCmdRunner * mksCmdRunner;

/**
 * typedef used for abstraction.
 */
typedef struct _mksIntegrationPoint * mksIntegrationPoint;

/**
 * typedef used for abstraction.
 */
typedef struct _mksMultiValue * mksMultiValue;

/**
 * typedef used for abstraction.
 */
typedef struct _mksOptionList * mksOptionList;

/**
 * typedef used for abstraction.
 */
typedef struct _mksSelectionList * mksSelectionList;

/**
 * typedef used for abstraction.
 */
typedef struct _mksSession * mksSession;

/**
 * \struct _mksCommand mksCommand.h "mksCommand.h"
 * struct used for constructing an integrity command without having
 * to deal with string manipulation.  The struct can be created and initialized
 * using the mksCreateCommand() function, and must be released using the
 * mksReleaseCommand() function.
 */

struct _mksCommand {
    wchar_t          *appName;
    wchar_t          *cmdName;
    mksOptionList    optionList;
    mksSelectionList selectionList;
    unsigned short   genSubRtns;
    char	         *vendorName;	
};

/**
 * typedef used for clarity and simplicities sake.
 */
typedef struct _mksCommand * mksCommand;

#ifdef	__cplusplus
extern "C" {
#endif

/**
 * \brief Function used to execute a command contained within an mksCommand 
 * struct.
 *
 * Executing this function will reset the return value of the mksGetError() 
 * function.
 *
 * \param cr The mksCmdRunner to execute against.
 * \param cmd The mksCommand struct containing the command.
 * \param type The type of response to generate.
 *
 * \return The mksResponse generated by the function.
 */
MKS_API(mksResponse) mksCmdRunnerExecCmd(mksCmdRunner cr, 
					 const mksCommand cmd, 
					 const mksExecuteType type);


/**
 * \brief Function used to execute a command specified by the 'arr' array
 *
 * Executing this function will reset the return value of the mksGetError() 
 * function.
 *
 * \param cr The mksCmdRunner to execute against.
 * \param arr The wchar_t * array containing the command to execute.
 * \param len The size of the wchar_t * array.
 * \param type The type of response to generate.
 *
 * \return The mksResponse generated by the function.
 */
MKS_API(mksResponse) mksCmdRunnerExecArr(mksCmdRunner cr, 
					 const wchar_t **arr, 
					 const int len, 
					 const mksExecuteType type);

/**
 * \brief Function used to execute a third party command specified by the 
 * 'arr' array
 *
 * Executing this function will reset the return value of the mksGetError() 
 * function.
 *
 * \param cr The mksCmdRunner to execute against.
 * \param arr The wchar_t * array containing the command to execute.
 * \param len The size of the wchar_t * array.
 * \param type The type of response to generate.
 * \param vendor The third party vendor that created the command
 *
 * \return The mksResponse generated by the function.
 */
MKS_API(mksResponse) mksCmdRunnerExecArrWithVendor(mksCmdRunner cr, 
					 const wchar_t **arr, 
					 const int len, 
					 const mksExecuteType type,
					 const char* vendor);
/**
 * \brief Function used to interrupt an mksCmdRunner while it is executing a 
 * long running command or is in the middle of processing an interim response.
 *
 * If neither case is true for the given mksCmdRunner instance, then
 * nothing occurs.
 *
 * \param cr The mksCmdRunner to interrupt.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerInterrupt(mksCmdRunner cr);

/**
 * \brief Function used to check to see if the mksCmdRunner has completed 
 * executing a command or not.  
 *
 * If the mksCmdRunner is using interim results, this command will not return 
 * true until the mksGetExit() function is called.
 *
 * \param cr The mksCmdRunner to check.
 * \param flag The variable used to hold the status of the mksCmdRunner.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerIsFinished(const mksCmdRunner cr, 
					    unsigned short *flag);

/**
 * \brief Function used to retrieve the default hostname from the mksCmdRunner.
 *
 * \param cr The mksCmdRunner to retrieve the default from.
 * \param buf The buffer to store the data into.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerGetDefaultHostname(const mksCmdRunner cr,
						    char *buf,
						    size_t len);

/**
 * \brief Function used to retrieve the default port from the mksCmdRunner.
 *
 * \param cr The mksCmdRunner to retrieve the default from.
 * \param port The variable to store the default port into.  A value of -1 
 * means that no default was set.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerGetDefaultPort(const mksCmdRunner cr, 
						unsigned int *port);

/**
 * \brief Function used to retrieve the default username from the mksCmdRunner.
 *
 * \param cr The mksCmdRunner to retrieve the default from.
 * \param buf The buffer to store the data into.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerGetDefaultUsername(const mksCmdRunner cr, 
						    char *buf, 
						    size_t len);

/**
 * \brief Function used to retrieve the default username from the mksCmdRunner.
 *
 * \param cr The mksCmdRunner to retrieve the default from.
 * \param buf The wide char buffer to store the data into.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerGetDefaultUsernameWide(const mksCmdRunner cr, 
						    wchar_t *buf, 
						    size_t len);
						    
/**
 * \brief Function used to retrieve the default password from the mksCmdRunner.
 *
 * \param cr The mksCmdRunner to retrieve the default from.
 * \param buf The buffer to store the data into.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerGetDefaultPassword(const mksCmdRunner cr,
						    char *buf,
						    size_t len);

/**
 * \brief Function used to retrieve the default password from the mksCmdRunner.
 *
 * \param cr The mksCmdRunner to retrieve the default from.
 * \param buf The wide char buffer to store the data into.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerGetDefaultPasswordWide(const mksCmdRunner cr,
						    wchar_t *buf,
						    size_t len);
						    
/**
 * \brief Function used to retrieve the default impersonation user from the 
 * mksCmdRunner.
 *
 * \param cr The mksCmdRunner to retrieve the default from.
 * \param buf The buffer to store the data into.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerGetDefaultImpersonationUser(
						const mksCmdRunner cr,
						char *buf,
						size_t len);

/**
 * \brief Function used to retrieve the default impersonation user from the 
 * mksCmdRunner.
 *
 * \param cr The mksCmdRunner to retrieve the default from.
 * \param buf The wide char buffer to store the data into.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerGetDefaultImpersonationUserWide(
						const mksCmdRunner cr,
						wchar_t *buf,
						size_t len);

/**
 * \brief Function used to retrieve the mksSession associated with the given
 * mksCmdRunner.
 *
 * This function will only return NULL if the mksCmdRunner passed in is NULL.  
 * Executing this function will reset the return value of the mksGetError() 
 * function.
 *
 * \param cr The mksCmdRunner to retrieve the mksSession from.
 *
 * \return The mksSession associated with the mksCmdRunner.
 */
MKS_API(mksSession)  mksCmdRunnerGetSession(const mksCmdRunner cr);

/**
 * \brief Function used to set the default hostname for the mksCmdRunner.
 *
 * \param cr The mksCmdRunner to set the default on.
 * \param str The value for the default.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerSetDefaultHostname(mksCmdRunner cr, 
						    const char *str);

/**
 * \brief Function used to set the default port for the mksCmdRunner.
 *
 * \param cr The mksCmdRunner to set the default on.
 * \param port The value for the default.
 */
MKS_API(mksrtn)      mksCmdRunnerSetDefaultPort(mksCmdRunner cr, 
						const unsigned int port);

/**
 * \brief Function used to set the default username for the mksCmdRunner.
 *
 * \param cr The mksCmdRunner to set the default on.
 * \param str The value for the default.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerSetDefaultUsername(mksCmdRunner cr, 
						    const char *str);

/**
 * \brief Function used to set the default username for the mksCmdRunner.
 *
 * \param cr The mksCmdRunner to set the default on.
 * \param str The wide char value for the default.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerSetDefaultUsernameWide(mksCmdRunner cr, 
						    const wchar_t *str);
						    
/**
 * \brief Function used to set the default password for the mksCmdRunner.
 *
 * \param cr The mksCmdRunner to set the default on.
 * \param str The value for the default.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerSetDefaultPassword(mksCmdRunner cr, 
						    const char *str);

/**
 * \brief Function used to set the default password for the mksCmdRunner.
 *
 * \param cr The mksCmdRunner to set the default on.
 * \param str The wide char value for the default.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerSetDefaultPasswordWide(mksCmdRunner cr, 
						    const wchar_t *str);
						    
/**
 * \brief Function used to set the default impersonation user for the 
 * mksCmdRunner.
 *
 * \param cr The mksCmdRunner to set the default on.
 * \param str The value for the default.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerSetDefaultImpersonationUser(mksCmdRunner cr, 
							     const char *str);

/**
 * \brief Function used to set the default impersonation user for the 
 * mksCmdRunner.
 *
 * \param cr The mksCmdRunner to set the default on.
 * \param str The wide char value for the default.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCmdRunnerSetDefaultImpersonationUserWide(mksCmdRunner cr, 
							     const wchar_t *str);
							     
/**
 * \brief Function used to release the mksCmdRunner.
 *
 * Releasing an mksCmdRunner will interrupt any interim result processing that 
 * may be in progress.
 *
 * \param cr The mksCmdRunner to release.
 */
MKS_API(void)        mksReleaseCmdRunner(mksCmdRunner cr);

/**
 * \brief Function used to create and initialize an mksCommand struct.
 * \return The initialized mksCommand structure.
 */
MKS_API(mksCommand)  mksCreateCommand(void);

/**
 * Function used to release the fields in the mksCommand struct. It will 
 * release the cmd structure as well.
 * \param cmd The mksCommand instance to free
 */
MKS_API(void)        mksReleaseCommand(mksCommand cmd);

/**
 * \brief Function used to initialize the API. 
 *
 * This must be the first function called when starting to use the API to 
 * allow proper initialization of the internal logger, etc.
 *
 * \param logfile The filename to save the log data to.  If this parameter is
 * NULL, then the log data will be sent to mksapi.log in the current
 * working directory.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksAPIInitialize(const char *logfile);

/**
 * \brief Function used to create an mksIntegrationPoint to the local Integrity
 * Client.  As of MKS 2009, this function is deprecated in favour of the
 * function through which you would be asked to indicate the API version.
 *
 * \param ip A pointer to the mksIntegrationPoint constructed upon successful
 * execution of this function.
 * \param autostart Flag indicating if the Integrity Client should be started if
 * it is not already running.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCreateLocalIntegrationPoint(mksIntegrationPoint *ip, 
					    const unsigned short autostart);

/**
 * \brief Function used to create an mksIntegrationPoint to the local Integrity
 * Client.  Through this function, an API version can be requested in the 
 * form of a major and minor numbers.  This version would correspond to the
 * version of the Integrition platform (for example MKS 2009 is version 4.10;
 * major number 4, minor number 10) for which the integration was written
 * and verified.  By indicating the request version, should the Integrity
 * platform be upgraded, the platform will at least be advised that the
 * integration is still expecting API handling as per the requested version.
 *
 * \param ip A pointer to the mksIntegrationPoint constructed upon successful
 * execution of this function.
 * \param apiMajorVersion The major number for the API version being requested.
 * \param apiMinorVersion The minor number for the API version being requested.
 * \param autostart Flag indicating if the Integrity Client should be started if
 * it is not already running.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCreateLocalAPIConnector(mksIntegrationPoint *ip, 
					const unsigned short apiMajorVersion,
					const unsigned short apiMinorVersion,
					const unsigned short autostart);

/**
 * \brief Function used to create a generic mksIntegrationPoint to either an 
 * Integrity Client or an Integrity Server (both of which can be either local 
 * or remote).  As of MKS 2009, this function is deprecated in favour of the
 * function through which you would be asked to indicate the API version.
 *
 * \param ip A pointer to the mksIntegrationPoint constructed upon successful
 * execution of this function.
 * \param host The host name of the mksIntegrationPoint.
 * \param port The port number of the mksIntegrationPoint.
 * \param secure Flag indicating if the connection should be secure (using SSL)
 * or not.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCreateIntegrationPoint(mksIntegrationPoint * ip,
					       const char *host, 
					       const unsigned int port, 
					       const unsigned short secure);

/**
 * \brief Function used to create a generic mksIntegrationPoint to either an 
 * Integrity Client or an Integrity Server (both of which can be either local 
 * or remote).  Through this function, an API version can be requested in the 
 * form of a major and minor numbers.  This version would correspond to the
 * version of the Integrition platform (for example MKS 2009 is version 4.10;
 * major number 4, minor number 10) for which the integration was written
 * and verified.  By indicating the request version, should the Integrity
 * platform be upgraded, the platform will at least be advised that the
 * integration is still expecting API handling as per the requested version.
 *
 * \param ip A pointer to the mksIntegrationPoint constructed upon successful
 * execution of this function.
 * \param host The host name of the mksIntegrationPoint.
 * \param port The port number of the mksIntegrationPoint.
 * \param secure Flag indicating if the connection should be secure (using SSL)
 * or not.
 * \param apiMajorVersion The major number for the API version being requested.
 * \param apiMinorVersion The minor number for the API version being requested.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCreateAPIConnector(mksIntegrationPoint * ip,
					const char *host, 
					const unsigned int port, 
					const unsigned short secure,
					const unsigned short apiMajorVersion, 
					const unsigned short apiMinorVersion);

/**
 * \brief Function used to retrieve a string represenation of a particular 
 * mksrtn error code.
 *
 * \param error The mksrtn to retrieve the string representation for.
 *
 * \return The wchar_t * message related to the error code.
 */
MKS_API(wchar_t *)   mksAPIStrError(const mksrtn error);

/**
 * \brief For those functions that return objects, you can call mksGetError()
 * to get the specific reason why the object wasn't returned.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksGetError(void); 

/**
 * \brief Function called after use of the Integrity API has been completed.
 *
 * This function will release any remaining system resources still in use and
 * properly shut down the internal logging.  It is vital that this function
 * be called to properly release system resources before exiting an
 * application.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksAPITerminate(void);

/**
 * \brief Function used to retrieve the common mksSession instance from the
 * mksIntegrationPoint.  By default, the common mksSession will use the 
 * API request version as indicated when the mksIntegrationPoint was created.
 *
 * This function only makes sense if the mksIntegrationPoint is pointing at an 
 * Integrity Client (either local or remote).
 *
 * \param session A pointer to the newly constructed mksSession instance.
 * \param ip The mksIntegrationPoint to retrieve the mksSession from.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksGetCommonSession(mksSession *session,
					 const mksIntegrationPoint ip);

/**
 * \brief Function used to retrieve a non-common mksSession instance from the
 * mksIntegrationPoint.  By default, this mksSession will use the 
 * API request version as indicated when the mksIntegrationPoint was created.
 *
 * \param session A pointer to the newly constructed mksSession instance.
 * \param ip The mksIntegrationPoint to retrieve the mksSession from.
 * \param user The session username.
 * \param pass The session password.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCreateSession(mksSession *session,
				      const mksIntegrationPoint ip, 
				      const char *user, 
				      const char *pass);

/**
 * \brief Function used to retrieve a non-common mksSession instance from the
 * mksIntegrationPoint.  This function allow for the mksSession to be created
 * with its own explicit API request version, independent of the one specified
 * when the mksIntegrationPoint was created.  (Refer to the docs on the
 * creation of the mksIntegrationPoint for comments on the versioning).
 *
 * \param session A pointer to the newly constructed mksSession instance.
 * \param ip The mksIntegrationPoint to retrieve the mksSession from.
 * \param apiMajorVersion The major number for the API version being requested.
 * \param apiMinorVersion The minor number for the API version being requested.
 * \param user The session username.
 * \param pass The session password.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCreateVersionedSession(mksSession *session,
				      const mksIntegrationPoint ip, 
				      const unsigned short apiMajorVersion,
				      const unsigned short apiMinorVersion,
				      const char *user, 
				      const char *pass);

/**
 * \brief Function used to check the value of the autostart flag for the
 * mksIntegrationPoint.
 *
 * The autostart flag is only set when the mksIntegrationPoint was created by 
 * the mksCreateLocalIntegrationPoint() function.
 *
 * \param ip The mksIntegationPoint to check the flag.
 * \param autostart A variable containing the status of the autostart flag.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksIntegrationPointGetAutoStart(
				const mksIntegrationPoint ip,
				unsigned short *autostart);

/**
 * \brief Function used to retrieve the hostname of the given 
 * mksIntegrationPoint.
 *
 * \param ip The mksIntegrationPoint to retrieve the hostname from.
 * \param buf The buffer that the hostname will be copied into.
 * \param len The size of the given buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksIntegrationPointGetHostname(
				const mksIntegrationPoint ip,
				char *buf,
				size_t len);
/**
 * \brief Function used to retrieve the port used by the mksIntegrationPoint.
 *
 * If the mksIntegrationPoint was created using the
 * mksCreateLocalIntegrationPoint() function, then the port will return 0
 * until at least one command has been executed.
 *
 * \param ip The mksIntegrationPoint to retrieve the port from.
 * \param port A variable containing the value of the port upon successful
 * execution of this function.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksIntegrationPointGetPort(const mksIntegrationPoint ip,
						unsigned int *port);

/**
 * \brief Function used to check the value of the secure flag for the
 * mksIntegrationPoint.
 *
 * \param ip The mksIntegationPoint to check the flag.
 * \param flag A variable containing the status of the secure flag.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksIntegrationPointIsSecure(const mksIntegrationPoint ip,
                                                 unsigned short *flag);

/**
 * \brief Function used to release an mksIntegrationPoint and all resources
 * associated with it.
 *
 * Releasing an mksIntegrationPoint will also release any mksSessions 
 * associated with it.
 *
 * \param ip The mksIntegrationPoint to release.
 */
MKS_API(void)        mksReleaseIntegrationPoint(mksIntegrationPoint ip);

/**
 * \brief Function used to create a new mksMultiValue instance.
 *
 * \param mv A pointer to a newly created and initialized mksMultiValue 
 * instance.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCreateMultiValue(mksMultiValue *mv);

/**
 * \brief Function used to add a new value to an mksMultiValue instance.
 *
 * \param mv The mksMultiValue to add the value to.
 * \param value The value to add to the mksMultiValue.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksMultiValueAddValue(mksMultiValue mv, 
					   const wchar_t *value);

/**
 * \brief Function used to copy the values of one mksMultiValue instance into
 * another.
 *
 * \param dest The mksMultiValue instance to copy values into.
 * \param src The mksMultiValue instance to copy values from.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksMultiValueAddMultiValue(mksMultiValue dest, 
						const mksMultiValue src); 

/**
 * \brief Function used to retrieve the separator used by the mksMultiValue
 * instance.
 *
 * \param mv The mksMultiValue to retrieve the separator from.
 * \param separator The variable containing the separator upon successful
 * completion of this function.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksMultiValueGetSeparator(const mksMultiValue mv, 
                                               wchar_t *separator);

/**
 * \brief Function used to set the separator for an mksMultiValue instance.
 *
 * The separator is used each time a new value is added to the mksMultiValue
 * instance, so calling this function multiple times on the same
 * mksMultiValue instance will result in having multiple separators in the
 * mksMultiValue instance.
 * 
 * \param mv The mksMultiValue to set the separator for.
 * \param separator The separator to set.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksMultiValueSetSeparator(mksMultiValue mv, 
					       const wchar_t separator);

/**
 * \brief Function used to release an mksMultiValue instance and all resources
 * allocated by it.
 *
 * \param mv The mksMultiValue instance to release.
 */
MKS_API(void)        mksReleaseMultiValue(mksMultiValue mv);

/**
 * \brief Function used to create and initialize a new mksOptionList instance.
 *
 * \param list The variable containing the newly created and initialized
 * mksOptionList instance upon successful execution of this function.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCreateOptionList(mksOptionList *list);

/**
 * \brief Function used to add a new name/value option to an mksOptionList 
 * instance.
 *
 * \param list The mksOptionList instance to add the option to.
 * \param name The name of the option.
 * \param value The value of the option.  Can be NULL.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksOptionListAdd(mksOptionList list, 
				      const wchar_t *name, 
				      const wchar_t *value);

/**
 * \brief Function used to add the data from one mksOptionList to another.
 *
 * \param dest The mksOptionList to add the data from the other 
 * mksOptionList into.
 * \param src The mksOptionList to copy the data from.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksOptionListAddOptionList(mksOptionList dest,
						const mksOptionList src);
/**
 * \brief Function to add a name/mksMultiValue option to an mksOptionList 
 * instance.
 *
 * \param list The mksOptionList instance to add the option to.
 * \param name The name of the option.
 * \param value The mksMultiValue instance to add to the mksOptionList.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksOptionListAddMultiValue(mksOptionList list, 
						const wchar_t *name, 
						const mksMultiValue value);

/**
 * \brief Function to retrieve the size of an mksOptionList instance.
 *
 * \param list The mksOptionList to retrieve the size from.
 * \param size The variable containing the size of the given mksOptionList
 * instance upon successful execution of the function.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksOptionListSize(const mksOptionList list, int *size);

/**
 * \brief Function used to retrieve the first name/value pair from an 
 * mksOptionList instance.
 *
 * \param list The mksOptionList to retrieve the name/value pair from.
 * \param name The buffer to populate with the name.
 * \param name_len The size of the name buffer.
 * \param value The buffer to populate with the value.
 * \param value_len The size of the value buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksOptionListGetFirst(mksOptionList list, 
					   wchar_t *name, 
					   size_t name_len,
					   wchar_t *value,
					   size_t value_len);

/**
 * \brief Function used to retrieve the first name/value pair as a wchar_t * from 
 * an mksOptionList instance.
 *
 * The string representation will be of the form:
 *
 * \<prefix\>name\<separator\>value
 *
 * where the prefix is either - or -- and the separator is either a space
 * or an equals sign, depending on the name/value pair.
 *
 * \param list The mksOptionList to retrieve the wchar_t * representation of the 
 * name/value pair from.
 * \param buf The buffer to populate.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksOptionListGetFirstString(mksOptionList list,
						 wchar_t *buf,
						 size_t len);

/**
 * \brief Function used to retrieve the next name/value pair from an 
 * mksOptionList instance.
 *
 * \param list The mksOptionList to retrieve the name/value pair from.
 * \param name The buffer to populate with the name.
 * \param name_len The size of the name buffer.
 * \param value The buffer to populate with the value.
 * \param value_len The size of the value buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksOptionListGetNext(mksOptionList list, 
					  wchar_t *name, 
					  size_t name_len, 
					  wchar_t *value, 
					  size_t value_len);

/**
 * \brief Function used to retrieve the next name/value pair as a wchar_t * from 
 * an mksOptionList instance.
 *
 * The string representation will be of the form:
 *
 * \<prefix\>name\<separator\>value
 *
 * where the prefix is either - or -- and the separator is either a space
 * or an equals sign, depending on the name/value pair.
 *
 * \param list The mksOptionList to retrieve the wchar_t * representation of the 
 * name/value pair from.
 * \param buf The buffer to populate.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksOptionListGetNextString(mksOptionList list,
						wchar_t *buf,
						size_t len);

/**
 * \brief Function used to release an mksOptionList instance and all the 
 * resources allocated to it.
 *
 * \param list The mksOptionList to release.
 */
MKS_API(void)        mksReleaseOptionList(mksOptionList list);

/**
 * \brief Function used to create and initialize a new mksSelectionList 
 * instance.
 *
 * \param list The list that is created by this function.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksCreateSelectionList(mksSelectionList *list);

/**
 * \brief Function used to add a wchar_t * selection to an mksSelectionList.
 *
 * \param list The mksSelectionList to add the selection to.
 * \param str The wchar_t * selection to add.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksSelectionListAdd(mksSelectionList list, 
                                         const wchar_t *str);

/**
 * \brief Function used to add the data from one mksSelectionList to another.
 *
 * \param dest The mksSelectionList to add the data from the other 
 * mksSelectionList into.
 * \param src The mksSelectionList to copy the data from.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksSelectionListAddSelectionList(mksSelectionList dest, 
					 const mksSelectionList src); 

/**
 * \brief Function used to retrieve the first selection from an 
 * mksSelectionList.
 *
 * \param list The mksSelectionList to retrieve the first selection from.
 * \param buf The buffer to copy the first element of the mksSelectionList into.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksSelectionListGetFirst(mksSelectionList list, 
                                              wchar_t *buf, 
					      size_t len);

/**
 * \brief Function used to retrieve the next selection from an 
 * mksSelectionList.
 *
 * \param list The mksSelectionList to retrieve the next selection from.
 * \param buf The buffer to copy the first element of the mksSelectionList into.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksSelectionListGetNext(mksSelectionList list, 
                                             wchar_t *buf, 
					     size_t len);

/**
 * \brief Function used to retrieve the size of an mksSelectionList.
 *
 * \param list The mksSelectionList to retrieve the size of.
 * \param size The variable that will contain the size of the list upon
 * successful execution of this function.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)      mksSelectionListSize(const mksSelectionList list, 
                                          int *size);

/**
 * \brief Function used to release an mksSelectionList and all the resources
 * associated with it.
 *
 * \param list The mksSelectionList to release.
 */
MKS_API(void)        mksReleaseSelectionList(mksSelectionList list);

/**
 * \brief Function used to create and initialize a new mksCmdRunner and 
 * associate it with an mksSession.
 *
 * \param cr The variable containing an mksCmdRunner instance upon successful
 * execution of this function.
 * \param session The mksSession to associate with the newly created 
 * mksCmdRunner.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)              mksCreateCmdRunner(mksCmdRunner *cr, 
						mksSession session);

/**
 * \brief Function used to retrieve the autoconnect flag from an mksSession.
 *
 * \param session The mksSession to retrieve the flag from.
 * \param flag The variable containing the value of the autostart flag upon
 * successful execution of the function.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)              mksSessionGetAutoReconnect(
					const mksSession session, 
					unsigned short *flag);

/**
 * \brief Function used to check to see if an mksSession is a common one or 
 * not.
 *
 * \param session The mksSession to retrieve the flag from.
 * \param flag The variable containing the value of the common flag upon
 * successful execution of the function.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)              mksSessionIsCommon(const mksSession session, 
						unsigned short *flag);

/**
 * \brief Function used to retrieve the mksIntegrationPoint assocaited with
 * an mksSession.
 *
 * \param session The mksSession to retrieve the mksIntegrationPoint from.
 *
 * \return The mksIntegrationPoint associated with the mksSession.
 */
MKS_API(mksIntegrationPoint) mksSessionGetIntegrationPoint(
					const mksSession session);

/**
 * \brief Function used set the auto reconnect flag for an mksSession instance.
 *
 * \param session The mksSession instance to set the auto reconnect flag for.
 * \param flag The value of the auto reconnect flag to set.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)              mksSessionSetAutoReconnect(mksSession session, 
						const unsigned short flag);

/**
 * \brief Function used to retrieve the session username from an mksSession.
 *
 * \param session The mksSession to retrieve the session username from.
 * \param buf The buffer to copy the session username to.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)              mksSessionGetUsername(mksSession session, 
						   char *buf, 
						   size_t len);

/**
 * \brief Function used to retrieve the session password from an mksSession.
 *
 * \param session The mksSession to retrieve the session password from.
 * \param buf The buffer to copy the session password to.
 * \param len The size of the buffer.
 *
 * \return The error code of the function.
 */
MKS_API(mksrtn)              mksSessionGetPassword(mksSession session, 
						   char  *buf, 
						   size_t len);

/**
 * \brief Function used to release an mksSession.
 *
 * When the mksSession is released, all mksCmdRunner instances associated with 
 * the mksSession will also be released.
 *
 * \param session The mksSession to release.
 */
MKS_API(void)                mksReleaseSession(mksSession session);

/**
 * \brief Function used to set the locale.
 * 
 * \param locale Locale specifier.
 */
MKS_API(mksrtn) mksAPISetLocale (const char *locale );

#ifdef	__cplusplus
}
#endif
 
#endif
